Começando a Terminar - #03
Introdução a Programação Orientada a Objetos - Parte 3 - Classes

E ai pessoal!

Meu nome é Marcio e você está assistindo ao terceiro episódio deste novo canal no youtube.

Bom pessoal, no primeiro video a gente definiu o que são paradigmas de programação,

no segundo eu contei pra vocês um pouquinho da história da programação orientada a objetos

e agora, neste terceiro video, vamos conversar sobre 2 temas:

- os motivos que levaram a criação deste paradigma

- e também vamos começar a falar sobre alguns conceitos básicos

da programação orientada a objetos.

Então... Bora começar?!

*** Finalmente né cara?! Então diz ai.
*** Afinal de contas, pq a orientação a objetos foi criada?

Beleza, beleza, bora la!

Com a evolução da computação, os sistemas foram ficando maiores e mais complexos.

E ai meu amigo... ficava cada vez mais dificil organizar o código-fonte dos softwares.

Aos poucos as limitações da forma como os programadores estruturavam seus códigos foram aparecendo e

em geral, era relativamente comum os sistemas crescerem de forma insustentável.

Os programas começavam bem, iam crescendo, ai aparecia uma gambiarra aqui, uma ali,

uma alteração aqui gerava um bug em outra parte do sistemas...

até que chegava um momento que os desenvolvedores começavam a literalmente sofrer

para conseguir estender e dar manutenção nos sistemas maiores.

Nessas situações, qualquer pequena alteração no código

pode ter impactos inesperados em diversas outras partes do sistema.

Então, podemos dizer que um dos principais problemas que precisava ser resolvido era

permitir um melhor isolamento entre as partes do sistema,

[Melhor isolamento entre as partes do sistema]

e com isso possibilitar que o programador conseguisse facilmente escrever códigos com menor acoplamento,

ou seja, trechos de códigos mais independentes uns dos outros.

Isso tornaria também o re-aproveitamento de partes do sistema mais simples e transparente.

Bom, frente a esses problemas todos,

os programadores começaram a buscar formas para organizar melhor seus códigos.

Primeiro as próprias linguagens procedurais foram evoluindo,

criando mecanismos e padrões para tentar evitar essas situações.

E se usadas da forma correta, realmente já amenizavam bastante os problemas.

Maaas como sempre, outras abordagens mais radicais foram surgindo,

e uma delas foi a orientação a objetos.

<< https://books.google.com.br/books?id=YJ-eh1fCE78C&pg=PA31&lpg=PA31&dq=%22the+objectives+of%22+object+oriented+programming+are&source=bl&ots=rgXh9lIrcr&sig=B7f_XoL_gsroCcW1LXxnd54I-HE&hl=pt-BR&sa=X&ved=0ahUKEwi3jJDRr5bNAhWPl5AKHd9JCtkQ6AEIUTAI#v=onepage&q=%22the%20objectives%20of%22%20object%20oriented%20programming%20are&f=false >>

Na verdade, as ideias inicias da programação orientada a objetos iam *muito* além disso.

Ela foi criada com o objetivo de tentar aproximar o mundo real do mundo virtual,

ou seja, a idéia fundamental era tentar simular o mundo real dentro do computador.

E pra isso, nada mais natural do que utilizar... Objetos, afinal,

nosso mundo é composto de objetos, certo?!

Na abordagem proposta pela programação orientada a objetos

o programador fica responsável por moldar este mundo virtual,

explicando para o computador como os objetos devem ser criados como eles devem se comportar.

[https://pixabay.com/pt/falar-discuss%C3%A3o-microfone-lata-238488/]

[Envio de mensagens]

E para que os objetos consigam interagir entre si, eles "conversam" uns com os outros através do envio de mensagens e

é responsabilidade do programador especificar quais serão as mensagens que cada objeto pode receber,

e também qual a ação que aqueles objetos devem realizar ao receber uma determinada mensagem.

Então, quando um objeto precisa se comunicar com outro,

ele envia uma mensagem para o objeto desejado e opcionalmente ainda é possível

passar algumas informações junto com a mensagem, que são os parâmetros.

Uma vez enviada uma mensagem, o objeto que a recebeu executa todas as ações correspondentes

e em seguida retorna o resultado dessa execução para o objeto que

iniciou a comunicação.

Dessa forma, dois objetos conseguem trocar informações entre si facilmente.

*** Cara... na boa, já to viajando aqui...

Vamos a um exemplo um pouco mais prático, que fica mais fácil de entender.

Imagine que você está desenvolvendo um software para uma locadora de carros.

Se você tivesse que explicar para o computador como funciona uma Locadora, quais objetos

você imagina que seriam necessários para modelar esta necessidade?

Em um primeiro momento eu consigo imaginar 3 tipos de objetos.

A própria Locadora de carros, afinal, é ela quem vai alugar os carros, certo?

Outro tipo de objeto que eu imagino que sejam necessários são... os Carros.

Se não existirem carros, não vamos ter nada pra alugar, né?

Bom, eu consigo imaginar pelo menos mais um objeto...

Qual você acha que seria?

*** Sei lá cara... tenho uma Locadora... tenho os carros da locadora... bom...

*** já tenho tudo... acho que só falta... tipo... alguém pra alugar os carros.

Exato!... está faltando o Locatário, que representa da pessoa que vai alugar os carros.

Então, logo de cara eu já consigo enxergar esses 3 tipos de objetos que vão representar

entidades do mundo real no meu sistema de aluguel de carros, que seriam:

- A Locadora

- O Carro

- E o Locatário

Como já disse pra vocês, nesse nosso mundo virtual, a forma de comunicação

entre os objetos se passa através de troca de mensagens.

Com esses 3 tipos de objetos que mostrei pra vocês,

como será que eles conversariam?

Bom, imagino que o Locatário iria enviar uma mensagem para a Locadora,

solicitando o aluguel de um carro.

Se tiver algum carro disponível, a locadora irá disponibilizar este carro

para o Locatário.

Simples, né? E acho que representa bem como funciona no mundo real, certo?

*** Ta, falando assim fica fácil né... mas ainda não entendi direito como vou implementar isso na prática...

Sei que esse exemplo ainda ta bem simples, e a representação um pouco abstrata demais,

e vou apresentar pra vocês outros exemplos mais interessantes mais pra frente.

Esse exemplo foi só pra você entender que na orientação a objetos,

o ideal é sempre tentar fazer a represetação da forma mais natural e próxima da nossa realidade, beleza?

*** Ok... Mas como eu crio esses objetos ai?

A gente chega lá. Maaas pra isso precisamos conversar sobre alguns outros conceitos.

E o primeiro deles que precisamos definir é:

O que são Classes.

*** Nossa, finalmente hein.

Hahaha é. Demorou um pouco né? Mas agora a gente já tem a base pra conversar sobre isso.

Maaaasss... isso vai ficar.. para o próximo video, blz?!






Se o mundo virtual que estamos construindo é formado por Objetos,

acho que é meio intuitivo pensar que o programador precisa estabelecer

em algum lugar *como* são criados estes objetos, certo?!

Voltando para o exemplo da locadora que citei agora pouco.

A gente sabe que dentro do sistema vão existir Carros,

e que eles podem ser alugados para Locatários.

Embora isso seja óbvio pra gente, precisamos de alguma forma explicar isso para o computador.

Na orientação a objetos, essas explicações são feitas pelo programador

através da especificação de Classes.

Cada classe é um conjunto de código que define, entre outras coisas:

- como determinados tipos objetos devem ser criados

- quais são suas características

- como eles devem se comportar e

- como eles devem interagir com demais objetos.

Fazendo uma analogia meio tosca com o mundo real,

imagine que... a gente conseguisse criar uma máquina que fosse capaz de construir carros sozinha.

Você entraria com alguns parâmetros como por exemplo:
- qual a cor do carro
- qual a a potência do motor

e em seguida essa máquina fosse capaz de construir um novo carro com as características que pedimos!

Isso ser bem legal né?

Mas essa máquina não é capaz de construir qualquer tipo de coisa.

Embora seja capaz de ter pequenas variações de acordo com alguns parâmetros pré-estabelecidos,

Ela é especializada em construir carros.

Conseguiu imaginar essa máquina? Bom, essa máquina é mais ou menos o conceito de Classes na

programação orientada a objetos!

E os produtos criados a partir dessa classe, ou seja, os carros, são os nosso Objetos.

Ou seja, através de uma única Classe, somos capazes de construir diversos Objetos similares.

No mundo real ainda não chegamos esse ponto...

Mas no virtual funciona mais ou menos dessa forma.

Claro que no mundo virtual não precisamos dar todos os detalhes.

Precisamos apenas especificar o mínimo necessário para que nosso sistema funcione.

Por exemplo, voltando mais uma vez para o sistema de locação de carros.

Assim como o exemplo que dei do carro, também precisaríamos criar uma Classe

que representasse o Locatário.

Neste caso fazer aquela associação da Máquina fica meio estranho né?

Imaginar uma máquina que seja capaz de construir Locatários... hahaha

Mas a representação no mundo virtual é mais ou menos essa mesmo.

Vamos ter uma Classe que representa







Não vou entrar em muitos detalhes agora, mas a gente vai conversar sobre tudo isso nos próximos vídeos, beleza?

*** Mas pera ai, hoje em dia ninguém mais programa de forma procedural né?!

Então... não é bem assim.

Como eu disse no video anterior, não existe uma solução que seja perfeita pra todos os casos.

Existem inúmeros exemplos de excelentes softwares escritos de forma procedural.

E existem situações onde a programações orientada a objetos pode nem fazer muito sentido...

Bom, pra você ter uma ideia,

existe um índice que sai periodicamente mostrando quais são as linguagens mais utilizadas.

Vamo da uma olhada?

Bom, a primeira coisa que chama atenção é que Java é disparada a mais usada.

Mas olha só quem está em *segundo* lugar. Ela mesma, a famosa linguagem C.

E a gente sabe que C é uma linguagem considerada procedural né.

Pra explicar melhor esse tema teria que começar a entrar em muitos detalhes tecnicos

e a gente estaria fugindo muito do tema deste video.

Mas o que gostaria de deixar claro pra vocês é que

existe uma tendência forte em se utilizar programação orientada a objetos

no lugar do paradigma procedural.

Mas isso não quer dizer que as linguagens procedurais estejam mortas tá.










Mas as semelhanças paravam por ai.

Quando comparada com C, Java era uma linguagem muito mais moderna, apresentando várias novidades pra época.

Podemos destacar as duas principais como sendo:

- Utilização de máquina virtual (JVM - Java Virtual Machine),

que prometia facilitar a criação de aplicações multi-plataformas.

O slogan "Write once, run anywhere" ou "escreva uma vez, execute em qualquer lugar"

foi adotado pela Sun na época pra tentar frisar esta suposta vantagem.

Outra coisa bem bacana era que Java já implementava o conceito de

Garbage Collector ou coletor automatico de lixo,

que facilitava muito a vida do programador ao fazer automaticamente o gerenciamento de memória,

algo que era bastante chato de gerenciar em outras linguagens da época.

Mas... pra falar a verdade, Java não era assim tãããão inovadora.

Existiam outras linguagens da época já traziam também estas novidades,

inclusive o próprio Smalltalk, que já fazia tudo isso e muitas outras.

Mas Java tinha 3 vantagens cruciais:

-era parecida com outras linguagens de programação que diversos programadores já estavam acostumados...

-era gratuita.

E pelo que andei pesquisando aqui,

a licença pra poder programar em Smalltalk nessa época era muito cara.

-e a terceira grande vantagem foi que Java conseguiu se integrar nos principais navegadores de internet

na época. Se você for um pouco mais velho, com certeza já se deparou alguma vez com aqueles applets Java...

Durante algum tempo era muito comum encontrar essa tecnologia nos sites,

e isso também ajudou bastante a popularização do Java.

Bom, eu ia contar aqui toda a história do Java, mas acho que

O objetivo da Sun ao criar o Java era usa-la para sistemas embarcados.

>>> Pra quem ai não conhece esse termo,


Um sistema embarcado (ou sistema embutido) é um sistema microprocessado no qual o computador é completamente encapsulado ou dedicado ao dispositivo ou sistema que ele controla. Diferente de computadores de propósito geral, como o computador pessoal, um sistema embarcado realiza um conjunto de tarefas predefinidas, geralmente com requisitos específicos. Já que o sistema é dedicado a tarefas específicas, através de engenharia pode-se otimizar o projeto reduzindo tamanho, recursos computacionais e custo do produto.








e com uma performance bastante ruim,

mas com o tempo a Sun foi incluindo mais recursos e melhorando a sua máquina virtual e
a linguagem foi ganhando cada vez mais adeptos.
Outro fator importante para ascensão do Java foi o fato dela ter sido integrada nos principais browsers da época,
possibilitando a criação dos famosos Applets Java que foram muito populares (embora odiados por muitos) nos anos 90.

Isso tudo ajudou a popularizar deste paradigma de programação

que hoje domina diversos setores de desenvolvimento de software.




























Como já conversamos no video anterior,

programação orientada a objetos nada mais é do que um dos vários paradigmas de programação.

Ele foi criada com o objetivo de tentar aproximar o mundo virtual do mundo real.

A idéia fundamental é tentar fazer modelos computacionais

de uma forma mais próxima da nossa realidade.

Para isso nada mais natural do que utilizar objetos, afinal,

nosso mundo é composto por eles, né?

Neste paradigma o programador é responsável por criar os objetos

e determinar como eles devem interagir.

Os objetos "conversam" uns com os outros através da troca de mensagens e

para que isso seja possível é necessário especificarmos quais serão

as mensagens que cada objeto pode receber e também

qual a ação que cada objeto deve realizar ao receber uma determinado tipo de mensagem.

*** Esse negocio ta parecendo muito abstrato pra minha cabeça...

*** pra que complicar tanto?!

Se você ficou confuso, não se preocupe,

daqui a pouco a gente vai ver alguns exemplos e tudo vai ficar mais claro.

Mas antes eu queria contar pra vocês um pouquinho sobre a história da POO.
