Começando a Terminar - #03
Introdução a Programação Orientada a Objetos - Parte 3 - Conceitos básicos

E ai pessoal!

Meu nome é Marcio e você está assistindo ao terceiro episódio deste novo canal na internet.

No primeiro video a gente definiu o que são paradigmas de programação,

no segundo eu contei pra vocês um pouquinho da história da programação orientada a objetos

e agora, neste terceiro video, vamos conversar sobre 2 temas:

Primeiro, os motivos que levaram a criação deste paradigma

e em seguida vamos começar a falar sobre alguns conceitos básicos

da programação orientada a objetos.

Então... Bora começar?!

Com a evolução da computação, os sistemas foram ficando maiores e mais complexos.

E ai... ficava cada vez mais difícil organizar o código-fonte dos softwares.

Aos poucos as limitações da forma como os programadores estruturavam seus códigos foram aparecendo e

em geral, era relativamente comum os sistemas crescerem de forma... insustentável.

Os programas começavam bem, iam crescendo, ai aparecia um bug aqui, outro ali,

até que chegava um momento que os desenvolvedores começavam a literalmente sofrer

para conseguir estender e dar manutenção nos sistemas maiores.

Em situações como essa, qualquer pequena alteração no código

pode ter impactos inesperados em diversas outras partes do sistema.

[Melhor isolamento entre as partes do sistema]

Então, podemos dizer que um dos principais problemas que precisava ser resolvido era

permitir um *melhor isolamento* entre as partes do sistema,

e com isso possibilitar que o programador conseguisse facilmente escrever códigos com *menor acoplamento*,

ou seja, trechos de códigos mais independentes uns dos outros.

Isso tornaria também mais simples o *re-aproveitamento de partes do sistema*.

E ao desenvolver qualquer software, é sempre uma boa prática tentar atingir estes objetivos.

Bom, e pra tentar fazer isso,

os programadores começaram a buscar... formas de organizar melhor seus códigos.

Primeiro as próprias linguagens procedurais foram evoluindo,

criando mecanismos e padrões para tentar contornar essas situações.

E essas formas, se usadas corretamente, realmente já amenizam bastante os problemas.

Maaas como sempre, outras abordagens mais radicais foram surgindo,

e uma delas foi a orientação a objetos.

<< https://books.google.com.br/books?id=YJ-eh1fCE78C&pg=PA31&lpg=PA31&dq=%22the+objectives+of%22+object+oriented+programming+are&source=bl&ots=rgXh9lIrcr&sig=B7f_XoL_gsroCcW1LXxnd54I-HE&hl=pt-BR&sa=X&ved=0ahUKEwi3jJDRr5bNAhWPl5AKHd9JCtkQ6AEIUTAI#v=onepage&q=%22the%20objectives%20of%22%20object%20oriented%20programming%20are&f=false >>

Então, podemos dizer que um dos principais objetivos da criação deste paradigma

era tentar resolver esses problemas que citei. Ou seja,

era mais uma forma de tentar melhorar o isolamento, diminuir o acoplamento e

facilitar o re-aproveitamento de partes do código

- Melhor isolamento

- Diminuir acoplamento

- Re-aproveitar de código

Mas na verdade, as ideias inicias da programação orientada a objetos iam *muito* além disso.

Ela foi criada com o objetivo de tentar aproximar o mundo real do mundo virtual,

ou seja, a idéia fundamental era tentar simular o mundo real dentro dos nossos sistemas.

E pra isso, nada mais natural do que utilizar... Objetos, afinal,

nosso mundo é composto... por objetos, certo?!

Na abordagem proposta por este paradigma

o programador fica responsável por... moldar esse mundo virtual,

especificando pro computador como os objetos devem ser criados e como eles devem se comportar.

[https://pixabay.com/pt/falar-discuss%C3%A3o-microfone-lata-238488/]

[Envio de mensagens]

E para que os objetos consigam interagir entre si, eles "conversam" uns com os outros através do envio de mensagens e

o programador precisa então especificar quais serão as mensagens que cada objeto pode receber,

e também qual a *ação* que cada objeto deve realizar ao receber uma determinada mensagem.

Então, de uma forma bem resumida, você pode imaginar que neste paradigma

temos vários objeto dentro da nossa aplicação e para que um objeto se comunique com outro,

ele envia uma mensagem ao destinatário e, opcionalmente, ainda é possível...

passar algumas informações adicionais, que são os parâmetros.

Uma vez enviada uma mensagem, o objeto que a recebeu executa todas as ações correspondentes

e em seguida retorna o resultado dessa execução pro objeto que

iniciou a comunicação.

Dessa forma, dois objetos conseguem facilmente trocar informações entre si.

*** Cara... na boa, já to viajando aqui...

Tudo bem.

Vamos a um exemplo um pouquinho mais prático que fica mais fácil de entender, beleza?

Imagine que você está desenvolvendo um software... pra uma locadora de carros.

Bom, você precisa partir do pressuposto que o computador...

não conhece nada a respeito do nosso mundo real... e

você vai ter que explicar pra ele como funciona uma Locadora.

Mas o nosso software não precisa de *todos* os detalhes, né?

A gente pode omitir as informações que não são relevantes. Dessa forma, podemos

criar um *modelo* que... *representa* o funcionamento de uma Locadora do nosso mundo real

mas de uma forma mais... simplificada, só com o que é realmente essencial.

Então, nos precisamos representar... algo similar a isso aqui ó:

- Oi, tudo bom? Eu gostaria de alugar um carro.

- Olá. Tudo bem. Aguarde um instante por favor, vou verificar se temos algum disponível.

- Ok... estou aguardando. (assoviando)

- Encontrei este aqui.

- Ah, era exatamente o que eu queria! Muito obrigado!

Bom, depois dessa minha *suuuper* atuação representando o problema,

quais objetos você imagina que seriam necessários pra modelar

dentro do nosso sistema uma simulação como essa da nossa Locadora?

Em um primeiro momento eu consigo imaginar 3 tipos de objetos.

Preciso de algo que represente o Carro que vai ser alugado,

já que se não existirem carros, não vamos ter nada pra alugar, né?

<< Mostrar o carrinho >>

Também preciso de um objeto que represente a própria Locadora de carros,

afinal, é ela quem vai alugar os carros, certo?

Bom, eu preciso também de um... Locatário. Que representa a pessoa que irá alugar o veiculo.

Então, logo de cara eu já consigo enxergar esses 3 tipos de objetos que vão representar

entidades do mundo real no meu sistema de aluguel de carros, que seriam então:

- O Carro

- A Locadora

- E o Locatário

Como já disse pra vocês, nesse nosso mundo virtual, a forma de comunicação

entre os objetos se passa através de troca de mensagens.

Com esses 3 tipos de objetos que mostrei pra vocês,

como será que eles conversariam dentro do nosso sistema?

Bom, eu imagino que vá ser algo muito similar a representação que fiz anteriormente:

O Locatário iria enviar uma mensagem para a Locadora,

solicitando o aluguel de um carro.

O título dessa mensagem poderia ser algo como... "alugarCarro".

E ao receber essa mensagem, a Locadora vai verificar se possui algum veiculo disponível,

e se tiver, irá disponibilizar este carro para o Locatário.

Como eu já disse, toda vez que um objeto envia uma mensagem ele pode receber algum *retorno* de volta.

Neste nosso caso, o retorno da mensagem "alugarCarro" poderia ser um Objeto que representa... o carro alugado.

Acho que esta seria uma representação adequada de como mais ou menos funciona no mundo real, certo?

Claro que existem diversas outras formas de modelar este mesmo problema.

Esta foi apenas a forma como EU imaginei, mas pode ser que você encontre outras maneiras.

*** Ta, falando assim fica fácil né... mas ainda não entendi direito como vou implementar isso na prática...

Sei que esse exemplo ainda ta bem simples, e a representação... um pouco abstrata demais,

e vou apresentar pra vocês outros exemplos mais interessantes mais pra frente.

Esse primeiro exemplo foi só pra vocês entenderem que na orientação a objetos,

o ideal é sempre tentar elaborar a representação da forma mais natural e

próxima da nossa realidade possível, beleza?

*** Ok... Mas como é que eu crio esses objetos ai?!

A gente chega lá. Maaas pra isso precisamos conversar sobre alguns outros conceitos.

E o primeira coisa que precisamos definir é:

O que são Classes.

*** Nossa, finalmente hein.

Hahaha é. Demorou um pouco né? Mas agora a gente já tem uma boa base pra conversar sobre isso.

Maaaasss... isso vai ter que ficar.. para o próximo video, tudo bem?!

Então é isso ai.

Bom pessoal, caso ainda não esteja seguindo o canal, não esquece de se inscrever ai,

dar um like nesse video e de me seguir lá no twitter, beleza?!

Até mais!

*** O Locatário envia uma mensagem pra Locadora.

*** Mas e se não tiver mais nenhum carro pra alugar? Sei lá...
