Começando a Terminar - #02
Introdução a Programação Orientada a Objetos - Parte 2 - História

E ai pessoal!

Meu nome é Marcio e você está assistindo ao segundo episódio deste novo canal no youtube.

Sei que você deve estar morrendo de vontade de partir logo pra temas mais avançados, né?

E gente chega lá, beleza?

Mas aaantes... eu quero contar pra vocês um pouquinho sobre a *história* da programação orientada a objetos,

pra que a gente possa se contextualizar um pouco melhor.

Então, o tema desse segundo video vai ser esse: A História da Programação Orientada a Objetos.

Bora começar?

Bom, o inicio de tudo foi lá na década de 70

quando uma das equipes da famosa Xerox PARC lançou uma nova linguagem de programação.

[Image: http://www.digibarn.com/collections/locations/xerox-parc/parc-view.jpg]

Provavelmente você já deve ter ouvido falar desse lugar

já que eles foram pioneiros em diveeersas áreas importantes da computação.

Sabe essa interface gráfica que você tá usando aí? Com mouse, janelas, ícones?

Pois é, eles que inventaram tudo isso.

Além das redes ethernet, impressoras laser e muitas outras coisas legais.

E foi lá também que surgiu a linguagem de programação Smalltalk.

[https://makerspacenanaimo.org/wp-content/uploads/2015/04/SmalltalkBalloon.jpg]

Um dos principais responsáveis por iniciar este projeto foi o Alan Kay.

[http://vpri.org/images/people/founders/alan_kay_09.jpg]

Se você ainda não tinha ouvido falar da Xerox Parc ou do Alan Kay,

anota ai esses nomes e depois da uma pesquisada sobre eles na internet;

com certeza vai achar muita coisa interessante...

Tem inclusive aquele famosa história de quando a Apple ainda tava começando e

o Steve Jobs fez uma visita na Xerox Parc e... acabou usando muita coisa que viu por lá como inspiração.

Maaas voltando pra linguagem Smalltalk...

junto com ela podemos dizer que também foi concebido o termo "Programação Orientada a Objetos".

É difícil dizer com precisão em que momento este paradigma foi criado

mas a gente sabe que parte dos conceitos na verdade já eram aplicados

em outras linguagens que vieram antes do Smalltalk.

Provavelmente a primeira mesmo a utilizar algumas dessas idéias foi a Simula 67,

uma linguagem criada pelo Centro Norueguês de Computação, em Oslo, no ano de 1967.

*** mano, 1967?! Mas esse negocio é velho pra caramba então!

Pois é. Este paradigma de programação já é bastante antigo né

mas demorou pra começar a se difundir nas grandes empresas de desenvolvimento de software.

E embora Simula 67 já trouxesse alguns conceitos da orientação a objetos,

Smalltalk elevou essas ideias a um novo patamar.

Mas pelo que andei pesquisando,

as primeiras versões do Smalltalk tinham como objetivo ser uma ferramenta educacional e

só a partir de 81, quando Alan Kay saiu do projeto,

é que o foco dela mudou para ser uma linguagem mais voltada para a industria.

Lá pro final da década de oitenta e durante o década de noventa

Smalltalk atééé que chegou a se tornar uma linguagem relativamente popular.

Mas devido a diversos fatores, ela acabou perdendo espaço pra outras linguagens,

principalmente no final da década de 90 e início dos anos 2000.

*** Como assim cara?! Por quê isso?

São vários os motivos...

e cada pessoa que você perguntar vai te dar uma resposta diferente.

Mas, na minha opinião..

era um pouco difícil convencer os profissionais da época

a migrar para um paradigma orientado a objetos da forma como era oferecido pelo Smalltalk.

Isso exigia que o programador tivesse um profundo conhecimento sobre orientação a objetos,

e além disso, não era só o paradigma que mudava.

Toda a sintaxe e o ambiente de desenvolvimento utilizados pelo Smalltalk

em nada lembrava as demais linguagens que a maioria dos programadores já estavam acostumados.

Saca só como já era o Smalltalk, em 1983.

[ Imagem da IDE: https://maciaszek.net/wp-content/uploads/2006/08/Smalltalk-80.png ]

Bom, talvez eu até me arrisque a dizer que Smalltalk estava muito a frente do seu tempo...

Pra piorar, pelo que eu li por ai, no final da década de 80 e durante a década de 90

o preço da licença para poder usar Smalltalk era... um pouco salgado...

e a política de marketing deles também não era lá... muito eficiente.

Hoje em dia a realidade é outra, né?

Existem várias implementações dessa linguagem que são gratuitas e open-source

mas elas só foram lançadas muito tempo depois, e ai... já era tarde.

A gente tem que lembrar também que naquela época os hardwares eram bem mais limitados

e as tecnologias por trás do Smalltalk, embora trouxessem diversas novidades e vantagens

também tinham um alto custo em termos de performance.

Ou seja, no começo, softwares construídos em Smalltalk costumavam ter um desempenho... um pouco ruim.

*** Pera ai, quer dizer que se eu desenvolver meus softwares usando Programação Orientada a objetos

*** eles vão ficar lentos?!

Calma, não é bem assim...

Hoje em dia não só o hardware evoluiu,

mas evoluíram também as técnicas de otimização utilizadas para implementar essas soluções.

Existem programadores que estão diariamente trabalhando em formas de melhorar a performance

e a cada nova versão das linguagens de programação,

técnicas cada vez mais avançadas são construídas com o objetivo deixar mais rápida

a execução dos softwares implementados utilizando essas tecnologias.

Isso permite que hoje em dia se tenha um desempenho muuuito superior ao que era algumas décadas atrás.

*** Ta bom vai.. conta mais ai. Não existiam outras linguagens orientadas a objetos?!

Então, vamo lá.

Paralelamente a tudo isso, com o tempo, várias linguagens procedurais pré-existentes

começaram a incluir alguns conceitos da programação orientada a objetos

e este paradigma, aos poucos, foi ganhando cada vez mais força.

Por exemplo, em 1983, quando eu tinha 1 aninho de idade...

[ foto bebê ]

tivemos a criação do C++ e do Objective C, ambas derivadas da linguagem C.

Em 86 foi a vez do Pascal ganhar uma versão com suporte a objetos, chamada Object Pascal.

Em 87 veio o Common Lisp Object System, uma evolução do Common Lisp.

E por ai vai...

Lá pra meados da década de 90

a adoção da programação orientada a objetos começou a ganhar cada vez mais força.

até que em 95 nasceu o Java.

Acho que todo mundo já ouviu falar nessa linguagem, né?

Bom, a sintaxe do Java foi inspirada principalmente no C e Objetive-C,

Desta forma a maioria dos programadores

se sentiam a vontade pra explorar e experimentar esta nova linguagem.

E pra completar, Java era multi-plataforma e gratuita.

Alias, a campanha de marketing deles insistia bastante no fato dela ser multi-plataforma.

O slogan era "Escreva uma vez, execute em qualquer lugar",

se referindo ao fato de que você poderia por exemplo escrever um software no Windows

e depois executa-lo em um computador com sistema operacional da Apple

sem precisa fazer nenhuma alteração.

Tudo bem que cá entre nós, isso não funcionava muito bem não,

mas não da pra negar que era uma ótima campanha de marketing.

E foi assim que a programação orientada a objetivos foi ganhando seu espaço

e conquistando cada vez mais programadores...

Na segunda metade da década de 90, Java tava com tanta força

que até a Microsoft chegou a conseguir uma licença para fazer a sua própria versão: o Visual J++.

Mas essa implementação desrespeitava os padrões da linguagem Java,

sendo assim uma versão que era incompatível com o Java original.

Isso acabou causando uma grande confusão, a Microsoft foi processada e

eventualmente acabou abandonando o projeto e mudando um pouco o foco.

Em 2002 veio o lançamento do framework .NET onde a Microsoft nos apresentou a linguagem C#,

que em diversos aspectos era... bastante similar ao Java.

Mas além do C#, com o .NET a Microsoft também apostou em uma reformulação geral de

em sua então muito popular linguagem Visual Basic, adicionando um melhor suporte a orientação a objetos.

Bom, eu poderia ficar aqui listando todas as linguagens

que foram criadas durante esses anos

e todas as vantagens e desvantagens de cada uma delas,

mas o video ia ficar muito longo e cansativo.

E eu acho que você já entendeu qual era o contexto da época né.

O que queria também deixar claro pra vocês

é que orientação a objetos vem mostrando que veio pra ficar...

mas isso não quer dizer que os demais paradigmas, como o procedural, o funcional e o lógico

estejam mortos, ta?

Tem muito software de qualidade que até hoje, por diversas razões, ainda são escritos de forma procedural.

Só pra citar um exemplo, o kernel do sistema operacional Linux é todo feito em C.

[ http://tecnologiaaberta.com.br/wp-content/uploads/2015/01/Linus_Torvalds_cropped.jpg ]

Se você tiver curiosidade, tem umas discussões até meio engraçadas em que o Linus Torvalds,

que é o criador do Linux, explica os motivos dele *odiar* C++

e ser contra o uso de orientação a objetos nos sistemas em que ele trabalha.

E sobre o paradigma funcional, como eu já havia dito no video anterior

ele tem ganhado bastaste espaço e pode ser uma boa alternativa.

Além do paradigma Lógico, que eu não vejo sendo muito usado no dia-a-dia,

mas que pode ser uma excelente escolha em determinadas situações.

Lembrando sempre, como também já disse no video anterior, que o uso de um paradigma

não necessariamente exclui os demais.

Em muitas linguagens é possível misturar os paradigmas e tentar tirar o melhor proveito de cada um deles.

*** Ok ok.. mas afinal de contas, por quê criaram a programação orientada a objetos?

*** To achando esse negocio complicado demais cara...

*** Qual era o objetivo dessa mudança toda?

Bom... eu queria muito falar mais sobre isso com vocês hoje,

maaas esse video já está ficando muito longo

e a gente já ta fugindo um pouco do escopo...

Então... no próximo video a gente conversa mais sobre isso, beleza?!

E é isso ai.

Espero que vocês estejam gostando das video-aulas e.... até a próxima.

Ah pessoal! Não esquece de se inscrever aqui no canal, dar um like nesse video e me seguir lá no twitter, beleza?!

Até mais!

http://www.i-programmer.info/history/computer-languages/474-towards-objects-and-functions-1980s.html?start=1
